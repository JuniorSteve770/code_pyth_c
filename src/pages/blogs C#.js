import React, { useState, useEffect } from "react";
import "./QCMStyles.css";

// Flashcards pour le niveau basic
const basicSlides = [
    {
        question: "Qu'est-ce que C# ?",
        answer: "C# est un langage orient√© objet moderne d√©velopp√© par Microsoft, utilis√© pour le web, les applications desktop, mobiles, le cloud et les jeux (Unity)."
      },
      {
        question: "Qu‚Äôest-ce que le SDK .NET ?",
        answer: "Un ensemble d‚Äôoutils incluant le compilateur C#, des biblioth√®ques et une interface en ligne de commande pour compiler et ex√©cuter du code C#."
      },
      {
        question: "Quelle commande CLI permet de cr√©er un nouveau projet console en C# ?",
        answer: "`dotnet new console -n MonProjet`"
      },
      {
        question: "Comment ex√©cuter un projet C# cr√©√© avec .NET CLI ?",
        answer: "`dotnet run`"
      },
      {
        question: "Quels environnements de d√©veloppement sont recommand√©s pour le C# ?",
        answer: "Visual Studio (complet) ou Visual Studio Code (l√©ger avec extensions C#)"
      },
      {
        question: "Quels types d'applications peut-on cr√©er avec le SDK .NET ?",
        answer: "Applications console, web (ASP.NET), API REST, mobiles (Xamarin), jeux (Unity)"
      },
      {
        question: "Donne un exemple de d√©claration de variable avec type en C#.",
        answer: "`int nombre = 10;` ou `string message = \"Bonjour\";`"
      },
      {
        question: "Quels sont les op√©rateurs arithm√©tiques de base en C# ?",
        answer: "`+`, `-`, `*`, `/`, `%` (modulo)"
      },
      {
        question: "Quels sont les op√©rateurs de comparaison en C# ?",
        answer: "`==`, `!=`, `<`, `>`, `<=`, `>=`"
      },
      {
        question: "Quelle structure contr√¥le le flux selon une condition ?",
        answer: "`if`, `else if`, `else` ou `switch-case`"
      },
      {
        question: "Quels types de boucles peut-on utiliser en C# ?",
        answer: "`for`, `while`, `foreach`"
      },
      {
        question: "Comment d√©clare-t-on un tableau en C# ?",
        answer: "`int[] nombres = new int[3] { 1, 2, 3 };`"
      },
      {
        question: "Donne deux op√©rations courantes sur les cha√Ænes de caract√®res en C#.",
        answer: "`ToUpper()`, `Replace()`, `Length`, `ToLower()`"
      },
      {
        question: "Quelle classe permet de g√©rer les dates en C# ?",
        answer: "`DateTime`"
      },
      {
        question: "Comment cr√©er une date future avec DateTime ?",
        answer: "`DateTime dateFuture = DateTime.Now.AddDays(7);`"
      },
      {
        question: "√Ä quoi sert une √©num√©ration (`enum`) en C# ?",
        answer: "√Ä d√©finir un ensemble de constantes nomm√©es."
      },
      {
        question: "Quel est un projet simple √† faire en console pour s'exercer ?",
        answer: "Une calculatrice avec conditions `if` ou `switch` pour g√©rer les op√©rations."
      },
      {
        question: "Quelle application peut-on cr√©er pour pratiquer la gestion de listes ?",
        answer: "Une TODO list console : ajouter, supprimer, afficher des t√¢ches avec `List<string>`"
      },
      {
        question: "Pourquoi utilise-t-on `switch` plut√¥t que plusieurs `if` en C# ?",
        answer: "Le `switch` est plus lisible et structur√© pour comparer une seule variable √† plusieurs cas pr√©cis, surtout avec des valeurs constantes comme des caract√®res ou des cha√Ænes."
      },
      {
        question: "Dans ce code, que fait le bloc `case 'B': Console.WriteLine(\"Bien\"); break;` si `char grade = 'B';` ?",
        answer: "Il affiche 'Bien' car la variable `grade` correspond au `case 'B'`. Le `break` emp√™che l'ex√©cution des autres cas."
      },
      {
        question: "Comment est structur√©e une boucle `for` et quand l‚Äôutiliser ?",
        answer: "`for (int i = 0; i < 5; i++)` : utile quand on conna√Æt √† l‚Äôavance le nombre d‚Äôit√©rations. Elle suit une initialisation, une condition de boucle et une incr√©mentation."
      },
      {
        question: "Quel est le r√¥le d'une boucle `while` ?",
        answer: "Elle ex√©cute un bloc tant qu‚Äôune condition est vraie. Id√©ale quand on ne sait pas combien de fois on doit r√©p√©ter le code √† l'avance."
      },
      {
        question: "Quand utiliser `foreach` en C# ?",
        answer: "`foreach` est utilis√© pour parcourir tous les √©l√©ments d‚Äôun tableau ou d‚Äôune collection sans manipuler d‚Äôindex manuellement. Tr√®s pratique et s√©curis√©."
      },
      {
        question: "Comment fonctionne une mini-calculatrice en console C# ?",
        answer: "Elle lit deux `double` depuis le clavier, puis lit un caract√®re d‚Äôop√©ration. Un `switch` traite cette op√©ration et affiche le r√©sultat via `Console.WriteLine()`."
      },
      {
        question: "Quels √©l√©ments fondamentaux sont mobilis√©s dans le projet calculatrice ?",
        answer: "Entr√©e utilisateur (`ReadLine`), parsing (`Convert.ToDouble`), conditions (`switch`) et affichage (`Console.WriteLine`)."
      },
      {
        question: "Dans le projet de gestion de t√¢ches, que fait l‚Äôutilisateur ?",
        answer: "Il interagit avec un menu dans une boucle `while`, ajoute/supprime des t√¢ches via `List<string>`, et affiche la liste avec un `foreach`."
      },
      {
        question: "Comment supprimer un √©l√©ment d‚Äôune liste par son index ?",
        answer: "`taches.RemoveAt(index);` ‚Äî Supprime la t√¢che situ√©e √† l‚Äôindex donn√© dans la liste `taches`."
      },
      {
        question: "Pourquoi utilise-t-on `Environment.Exit(0);` dans ce code ?",
        answer: "Pour terminer proprement l'ex√©cution du programme console lorsqu‚Äôun utilisateur s√©lectionne l‚Äôoption Quitter."
      },
      //oop
      {
        question: "Qu'est-ce qu'une classe en C# ?",
        answer: "Une classe est un mod√®le ou un plan qui d√©finit les propri√©t√©s et comportements d'un objet. Elle sert de blueprint pour cr√©er des instances appel√©es objets."
      },
      {
        question: "Quelle est la diff√©rence entre une classe et un objet en C# ?",
        answer: "Une classe est une d√©finition abstraite (blueprint), tandis qu'un objet est une instance concr√®te cr√©√©e √† partir de cette classe."
      },
      {
        question: "üì• √Ä quoi sert un getter en C# ?",
        answer: "Un getter permet d‚Äôacc√©der √† la valeur d‚Äôun attribut priv√© via une propri√©t√© publique. Ex : `public int Age { get { return age; } }`"
      },
      {
        question: "üì§ √Ä quoi sert un setter en C# ?",
        answer: "Un setter permet de modifier la valeur d‚Äôun attribut priv√© via une propri√©t√© publique. Ex : `public int Age { set { age = value; } }`"
      },
      {
        question: "üí° Quelle est la syntaxe standard d'une propri√©t√© avec getter et setter en C# ?",
        answer: "`public int Age { get; set; }` ‚Äî permet d‚Äôacc√©der et de modifier automatiquement l‚Äôattribut sous-jacent."
      },
      {
        question: "üîê Pourquoi utiliser des getters et setters plut√¥t que des attributs publics ?",
        answer: "Pour encapsuler l‚Äôacc√®s aux donn√©es, appliquer des contr√¥les, et √©viter que des valeurs incorrectes soient affect√©es directement."
      },
      {
        question: "Qu'est-ce que l'h√©ritage en POO ?",
        answer: "L'h√©ritage permet √† une classe (classe d√©riv√©e) de r√©utiliser les membres (propri√©t√©s, m√©thodes) d'une autre classe (classe de base). Cela favorise la r√©utilisabilit√© du code."
      },
      {
        question: "Donnez un exemple de polymorphisme en C#.",
        answer: "Le polymorphisme permet aux objets de prendre plusieurs formes. Par exemple, une m√©thode peut √™tre red√©finie dans une classe d√©riv√©e avec 'override' pour modifier son comportement."
      },
      {
        question: "Qu'est-ce que l'encapsulation ?",
        answer: "L'encapsulation consiste √† masquer les d√©tails internes d'une classe tout en exposant une interface publique contr√¥l√©e. Les propri√©t√©s priv√©es sont g√©n√©ralement accessibles via des accesseurs (get/set)."
      },
      {
        question: "üîÑ Qu‚Äôest-ce que le polymorphisme en POO ?",
        answer: "Le polymorphisme permet √† des objets de classes diff√©rentes d‚Äô√™tre trait√©s comme s‚Äôils √©taient du m√™me type (souvent via une classe parente ou interface)."
      },
      {
        question: "‚öôÔ∏è Quels sont les deux types principaux de polymorphisme ?",
        answer: "1. Polymorphisme d‚Äôex√©cution (override) ‚Äî via h√©ritage. 2. Polymorphisme de compilation (overload) ‚Äî via surcharge des m√©thodes."
      },
      {
        question: "üîÅ Qu‚Äôest-ce que le polymorphisme d‚Äôex√©cution ?",
        answer: "C‚Äôest lorsqu‚Äôune m√©thode est red√©finie (`override`) dans une classe d√©riv√©e pour changer son comportement tout en conservant sa signature."
      },
      {
        question: "üß± Qu‚Äôest-ce que le polymorphisme de compilation ?",
        answer: "C‚Äôest la possibilit√© de d√©finir plusieurs m√©thodes avec le m√™me nom mais des signatures diff√©rentes (types ou nombre d‚Äôarguments)."
      },
      {
        question: "üìê Qu‚Äôest-ce que l‚Äôh√©ritage simple ?",
        answer: "Une classe d√©rive d‚Äôune seule classe de base. Exemple : `class Voiture : Vehicule`"
      },
      {
        question: "üîó Qu‚Äôest-ce que l‚Äôh√©ritage multiple (simul√© en C#) ?",
        answer: "C# ne permet pas l‚Äôh√©ritage multiple de classes, mais il le simule via l‚Äôimpl√©mentation de plusieurs interfaces. Ex : `class Oiseau : IVolant, IAnimal`"
      },
      {
        question: "Qu'est-ce qu'une interface en C# ?",
        answer: "Une interface d√©finit un contrat que les classes doivent impl√©menter. Elle sp√©cifie des m√©thodes et propri√©t√©s sans fournir d'impl√©mentation concr√®te."
      },
      {
        question: "Pourquoi utiliser l'injection de d√©pendances ?",
        answer: "L'injection de d√©pendances favorise la modularit√© et la testabilit√© en fournissant les d√©pendances n√©cessaires √† une classe plut√¥t que de les cr√©er directement."
      },
      {
        question: "Qu'est-ce qu'un type g√©n√©rique en C# ?",
        answer: "Un type g√©n√©rique permet de cr√©er des classes, interfaces ou m√©thodes r√©utilisables pour diff√©rents types de donn√©es, comme List<T> ou Dictionary<TKey, TValue>."
      },
      {
        question: "Quelle est la diff√©rence entre un type valeur et un type r√©f√©rence ?",
        answer: "Les types valeur (ex. int, float) sont stock√©s directement dans la pile, tandis que les types r√©f√©rence (ex. classes, tableaux) sont stock√©s dans le tas avec une r√©f√©rence pointant vers leur emplacement."
      },
      {
        question: "Comment structurer un projet en couches ?",
        answer: "Un projet bien structur√© est organis√© en couches : pr√©sentation (UI), m√©tier (business logic), acc√®s aux donn√©es (data access) et mod√®les/utilitaires partag√©s (common)."
      },
      {
        question: "Quelles sont les bonnes pratiques pour nommer les variables et m√©thodes en C# ?",
        answer: "Utilisez des noms descriptifs et suivez les conventions de nommage : PascalCase pour les classes/m√©thodes et camelCase pour les variables."
      },
      {
        question: "Qu'est-ce que le principe SOLID ?",
        answer: "SOLID est un ensemble de principes de conception orient√©e objet : Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation et Dependency Inversion."
      },
      {
        question: "Pourquoi utiliser des tests unitaires ?",
        answer: "Les tests unitaires valident chaque composant individuellement, garantissant que le code fonctionne correctement et r√©duisant les risques de r√©gression lors des modifications."
      },
      {
        question: "Quelle est l'utilit√© des commentaires XML en C# ?",
        answer: "Les commentaires XML documentent les classes, m√©thodes et param√®tres pour am√©liorer la lisibilit√© et g√©n√©rer automatiquement de la documentation."
      },
      {
        question: "Quelle est la syntaxe pour d√©clarer une classe en C# ?",
        answer: "public class NomClasse { // Propri√©t√©s et m√©thodes }"
      },
      {
        question: "Comment impl√©menter une interface en C# ?",
        answer: "Utilisez le mot-cl√© 'implements' pour indiquer qu'une classe respecte un contrat d√©fini par une interface. Exemple : public class MaClasse : IMonInterface { }"
      },
      {
        question: "Quelle est la diff√©rence entre 'virtual' et 'override' en C# ?",
        answer: "'virtual' permet de d√©finir une m√©thode pouvant √™tre red√©finie, tandis que 'override' red√©finit cette m√©thode dans une classe d√©riv√©e."
      },
      {
        question: "Quel est l'avantage des types g√©n√©riques ?",
        answer: "Les types g√©n√©riques permettent de cr√©er des structures r√©utilisables pour diff√©rents types de donn√©es, augmentant la flexibilit√© et r√©duisant la duplication de code."
      },
      {
        question: "Qu'est-ce qu'une m√©thode statique en C# ?",
        answer: "Une m√©thode statique appartient √† la classe elle-m√™me plut√¥t qu'√† une instance sp√©cifique. Elle est appel√©e avec le nom de la classe. Exemple : Math.Sqrt(16);"
      },
      {
        question: "Quelle est la diff√©rence entre 'abstract' et 'sealed' en C# ?",
        answer: "'abstract' indique qu'une classe ou m√©thode doit √™tre impl√©ment√©e par une classe d√©riv√©e, tandis que 'sealed' emp√™che une classe ou m√©thode d'√™tre h√©rit√©e ou red√©finie."
      },
      {
        question: "Quelle est l'utilit√© des √©num√©rations (enum) en C# ?",
        answer: "Les √©num√©rations d√©finissent un ensemble de constantes nomm√©es, rendant le code plus lisible et maintenable. Exemple : enum JoursSemaine { Lundi, Mardi };"
      }

];

// QCM pour les niveaux moyen et avanc√©
const questions = {
  moyen: [
    {
        "question": "Quelle est la sortie du code suivant ?\n\n```csharp\nint x = 10;\nint y = x;\ny = 20;\nConsole.WriteLine(x);```",
        "options": [
          "10",
          "20",
          "Erreur de compilation",
          "Null"
        ],
        "answer": "10",
        "explanation": "Les types valeur (comme int) sont copi√©s par valeur. Modifier 'y' ne change pas 'x'."
      },
      {
        "question": "Quelle est la sortie du code suivant ?\n\n```csharp\npublic class Personne {\n    public string Nom { get; set; }\n}\n\nPersonne p1 = new Personne { Nom = \"Alice\" };\nPersonne p2 = p1;\np2.Nom = \"Bob\";\nConsole.WriteLine(p1.Nom);```",
        "options": [
          "Alice",
          "Bob",
          "Erreur de compilation",
          "Null"
        ],
        "answer": "Bob",
        "explanation": "Les types r√©f√©rence (comme les classes) partagent la m√™me r√©f√©rence en m√©moire. Modifier 'p2' affecte √©galement 'p1'."
      },
      {
        "question": "Quelle m√©thode impl√©mente correctement l'encapsulation pour une propri√©t√© priv√©e ?\n\n```csharp\n// Option 1\npublic class Compte {\n    private double solde;\n    public double GetSolde() => solde;\n    public void SetSolde(double value) => solde = value;\n}\n\n// Option 2\npublic class Compte {\n    public double Solde { get; private set; }\n}\n\n// Option 3\npublic class Compte {\n    public double Solde { get; set; }\n}```",
        "options": [
          "Option 1",
          "Option 2",
          "Option 3",
          "Aucune des options"
        ],
        "answer": "Option 2",
        "explanation": "L'encapsulation est mieux r√©alis√©e avec des propri√©t√©s auto-impl√©ment√©es ayant un accesseur priv√© ('private set'), garantissant un contr√¥le sur les modifications."
      },
      {
        "question": "Quelle est la sortie du code suivant ?\n\n```csharp\npublic abstract class Animal {\n    public virtual void Parler() {\n        Console.WriteLine(\"Animal parle\");\n    }\n}\n\npublic class Chien : Animal {\n    public override void Parler() {\n        Console.WriteLine(\"Chien aboie\");\n    }\n}\n\nAnimal monAnimal = new Chien();\nmonAnimal.Parler();```",
        "options": [
          "Animal parle",
          "Chien aboie",
          "Erreur de compilation",
          "Null"
        ],
        "answer": "Chien aboie",
        "explanation": "Le polymorphisme permet √† la m√©thode 'Parler' de la classe d√©riv√©e (Chien) de remplacer celle de la classe de base (Animal)."
      },
      {
        "question": "Quelle interface doit √™tre impl√©ment√©e pour cr√©er une collection personnalis√©e √©num√©rable en C# ?\n\n```csharp\npublic class MaCollection<T> : ??? {\n    // Impl√©mentation ici\n}```",
        "options": [
          "`IEnumerable<T>`",
          "`ICollection<T>`",
          "`IList<T>`",
          "`IDisposable`"
        ],
        "answer": "`IEnumerable<T>`",
        "explanation": "Pour rendre une collection √©num√©rable, il faut impl√©menter l'interface `IEnumerable<T>`, qui permet l'utilisation de boucles `foreach`."
      },
      {
        "question": "Quelle est la meilleure fa√ßon d'injecter une d√©pendance dans une classe en C# ?\n\n```csharp\n// Option 1\npublic class Service {\n    private readonly ILogger logger;\n    public Service(ILogger logger) {\n        this.logger = logger;\n    }\n}\n\n// Option 2\npublic class Service {\n    private static readonly ILogger logger = new ConsoleLogger();\n}```",
        "options": [
          "Option 1",
          "Option 2",
          "Les deux sont √©quivalentes",
          "Aucune des options"
        ],
        "answer": "Option 1",
        "explanation": "L'injection de d√©pendances via le constructeur (Option 1) favorise la modularit√© et la testabilit√©, contrairement √† l'instanciation directe (Option 2)."
      },
      {
        "question": "Quelle est la sortie du code suivant ?\n\n```csharp\npublic class Boite<T> {\n    public T Contenu { get; set; }\n}\n\nBoite<int> boiteEntier = new Boite<int>();\nboiteEntier.Contenu = 42;\nConsole.WriteLine(boiteEntier.Contenu);```",
        "options": [
          "42",
          "Erreur de compilation",
          "Null",
          "Boite`1"
        ],
        "answer": "42",
        "explanation": "Les types g√©n√©riques permettent de cr√©er des classes r√©utilisables pour diff√©rents types. Ici, `Boite<int>` stocke un entier."
      },
      {
        "question": "Quelle est la diff√©rence entre les deux m√©thodes suivantes ?\n\n```csharp\npublic void Afficher(string message) {\n    Console.WriteLine(message);\n}\n\npublic void Afficher(object message) {\n    Console.WriteLine(message.ToString());\n}```",
        "options": [
          "Aucune diff√©rence",
          "La premi√®re m√©thode est sp√©cifique aux cha√Ænes, la deuxi√®me accepte tout type",
          "La premi√®re m√©thode est plus rapide",
          "La deuxi√®me m√©thode provoque une erreur de compilation"
        ],
        "answer": "La premi√®re m√©thode est sp√©cifique aux cha√Ænes, la deuxi√®me accepte tout type",
        "explanation": "La surcharge de m√©thodes permet de d√©finir plusieurs versions d'une m√©thode avec des param√®tres diff√©rents. La deuxi√®me m√©thode accepte n'importe quel type gr√¢ce au type 'object'."
      },
      {
        "question": "Quelle est la sortie du code suivant ?\n\n```csharp\npublic interface IVolant {\n    void Voler();\n}\n\npublic class Avion : IVolant {\n    public void Voler() {\n        Console.WriteLine(\"Avion vole\");\n    }\n}\n\nIVolant volant = new Avion();\nvolant.Voler();```",
        "options": [
          "Avion vole",
          "Erreur de compilation",
          "Null",
          "IVolant vole"
        ],
        "answer": "Avion vole",
        "explanation": "Une interface d√©finit un contrat que les classes doivent impl√©menter. L'objet 'volant' utilise l'impl√©mentation de la classe 'Avion'."
      },
      {
        "question": "Quelle est la meilleure pratique pour structurer un projet en couches ?\n\n```plaintext\nOption 1:\nMonProjet/\n‚îú‚îÄ‚îÄ Controllers/\n‚îú‚îÄ‚îÄ Services/\n‚îú‚îÄ‚îÄ DataAccess/\n‚îî‚îÄ‚îÄ Models/\n\nOption 2:\nMonProjet/\n‚îú‚îÄ‚îÄ Clients/\n‚îÇ   ‚îú‚îÄ‚îÄ ClientController.cs\n‚îÇ   ‚îú‚îÄ‚îÄ ClientService.cs\n‚îÇ   ‚îî‚îÄ‚îÄ ClientRepository.cs\n‚îî‚îÄ‚îÄ Produits/\n    ‚îú‚îÄ‚îÄ ProduitController.cs\n    ‚îú‚îÄ‚îÄ ProduitService.cs\n    ‚îî‚îÄ‚îÄ ProduitRepository.cs```",
        "options": [
          "Option 1",
          "Option 2",
          "Les deux sont √©quivalentes",
          "Aucune des options"
        ],
        "answer": "Option 2",
        "explanation": "Organiser le code par fonctionnalit√© (Option 2) am√©liore la lisibilit√© et la maintenabilit√©, car tous les fichiers li√©s √† une fonctionnalit√© sont regroup√©s."
      }
  ],
  avance: [
    {
        "question": "Quel est le r√¥le du Mod√®le Conceptuel des Donn√©es (MCD) dans Merise ?",
        "options": [
          "D√©crire le code source",
          "Repr√©senter les processus m√©tier",
          "Repr√©senter les entit√©s et leurs relations",
          "Cr√©er des interfaces utilisateur"
        ],
        "answer": "Repr√©senter les entit√©s et leurs relations",
        "explanation": "Le MCD mod√©lise la structure logique des donn√©es avec entit√©s, associations et cardinalit√©s."
      },
      {
        "question": "Quelle est une limite principale de la m√©thode Merise ?",
        "options": [
          "Elle n‚Äôest pas adapt√©e aux bases de donn√©es relationnelles",
          "Elle ne prend pas en compte les traitements m√©tier",
          "Elle est peu compatible avec les m√©thodes agiles",
          "Elle ne propose pas de repr√©sentation graphique"
        ],
        "answer": "Elle est peu compatible avec les m√©thodes agiles",
        "explanation": "Sa structure rigide et documentaire rend son usage difficile dans les environnements agiles."
      },
      {
        "question": "Quel diagramme UML permet de repr√©senter les classes, attributs, m√©thodes et relations ?",
        "options": [
          "Diagramme d‚Äôactivit√©s",
          "Diagramme de classes",
          "Diagramme d‚Äô√©tats",
          "Diagramme de s√©quence"
        ],
        "answer": "Diagramme de classes",
        "explanation": "Le diagramme de classes est un diagramme structurel montrant les classes et leurs relations."
      },
      {
        "question": "Quel diagramme UML est utilis√© pour repr√©senter le comportement temporel entre objets ?",
        "options": [
          "Diagramme de composants",
          "Diagramme de s√©quence",
          "Diagramme d‚Äôobjets",
          "Diagramme de d√©ploiement"
        ],
        "answer": "Diagramme de s√©quence",
        "explanation": "Le diagramme de s√©quence repr√©sente les √©changes temporels entre objets pour un sc√©nario donn√©."
      },
      {
        "question": "Quel est l‚Äôobjectif du test UAT ?",
        "options": [
          "Tester l'int√©gration des composants",
          "V√©rifier la logique m√©tier par les d√©veloppeurs",
          "Valider que le syst√®me r√©pond aux besoins m√©tier",
          "Mesurer la performance du backend"
        ],
        "answer": "Valider que le syst√®me r√©pond aux besoins m√©tier",
        "explanation": "UAT est r√©alis√© par les utilisateurs pour s'assurer que le produit est conforme aux attentes fonctionnelles."
      },
      {
        "question": "Quelle est la premi√®re √©tape du cycle TDD ?",
        "options": [
          "Impl√©menter le code",
          "Refactoriser",
          "√âcrire un test qui passe",
          "√âcrire un test qui √©choue"
        ],
        "answer": "√âcrire un test qui √©choue",
        "explanation": "Le cycle TDD commence toujours par l‚Äô√©criture d‚Äôun test qui √©choue pour guider le d√©veloppement."
      },
      {
        "question": "Quelle est la principale diff√©rence entre BDD et TDD ?",
        "options": [
          "TDD est manuel, BDD est automatique",
          "BDD se concentre sur les comportements m√©tiers, TDD sur le code",
          "TDD utilise Gherkin, BDD utilise JUnit",
          "BDD est fait apr√®s le d√©veloppement, TDD avant"
        ],
        "answer": "BDD se concentre sur les comportements m√©tiers, TDD sur le code",
        "explanation": "BDD exprime les comportements attendus en langage naturel, tandis que TDD teste des unit√©s de code."
      },
      {
        "question": "Quel outil est utilis√© pour les tests E2E ?",
        "options": [
          "pytest",
          "Selenium",
          "JUnit",
          "Cucumber"
        ],
        "answer": "Selenium",
        "explanation": "Selenium est un outil populaire pour l‚Äôautomatisation de sc√©narios utilisateur en E2E Testing."
      },
      {
        "question": "Quels tests sont utilis√©s pour v√©rifier qu‚Äôaucune fonctionnalit√© existante n‚Äôest cass√©e apr√®s modification ?",
        "options": [
          "UT",
          "RT",
          "TDD",
          "BDD"
        ],
        "answer": "RT",
        "explanation": "Le Regression Testing (RT) permet de v√©rifier qu‚Äôaucune r√©gression n‚Äôa √©t√© introduite dans le code existant."
      },
      {
        "question": "Quel type de test permet de valider l‚Äôint√©gration compl√®te entre tous les composants ?",
        "options": [
          "Unit Testing",
          "End-to-End Testing",
          "BDD",
          "Mock Testing"
        ],
        "answer": "End-to-End Testing",
        "explanation": "L‚ÄôE2E Testing simule un parcours utilisateur complet √† travers tous les composants du syst√®me."
      }
  ]
};

// Timer
const Timer = ({ timeLeft }) => (
  <p className="timer">‚è≥ Temps restant : <span>{timeLeft}s</span></p>
);

// Composant QCM
const QuestionCard = ({ question, options, onAnswerClick, timeLeft }) => (
  <div className="question-card">
    <h4>üí° {question}</h4>
    <Timer timeLeft={timeLeft} />
    <div className="options-container">
      {options.map((option, index) => (
        <button key={index} onClick={() => onAnswerClick(option)} className="option-button">
          {index + 1}. {option}
        </button>
      ))}
    </div>
  </div>
);

// Composant Flashcard
const Flashcard = ({ slide, index, total }) => (
  <div className="question-card">
    {/* <h5>üß† Flashcard {index + 1} / {total}</h5> */}
    <p><strong>{slide.question}</strong></p>
    <p>{slide.answer}</p>
  </div>
);

// Composant R√©sultat
const Results = ({ scores }) => {
  const totalScore = scores.moyen + scores.avance;
  const totalQuestions = Object.values(questions).flat().length;
  return (
    <div className="results">
      <h3>üéØ Score final : {totalScore} / {totalQuestions}</h3>
      <p>‚úÖ Niveau Moyen : {scores.moyen}</p>
      <p>‚úÖ Niveau Avanc√© : {scores.avance}</p>
      {totalScore > 3 ? (
        <h3 className="success">üöÄ Excellent travail ! Vous ma√Ætrisez bien les CONCEPTS BIG O !</h3>
      ) : (
        <p className="fail">üìö R√©visez encore un peu pour bien comprendre les concepts, ou retournez voir les flashcards !</p>
      )}
    </div>
  );
};

// Page principale
const Blogs = () => {
  const [level, setLevel] = useState("basic");
  const [currentSlide, setCurrentSlide] = useState(0);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [scores, setScores] = useState({ moyen: 0, avance: 0 });
  const [timeLeft, setTimeLeft] = useState(20);
  const [showResult, setShowResult] = useState(false);
  const [message, setMessage] = useState("");

  // Timer pour les niveaux QCM
  useEffect(() => {
    if (level !== "basic" && !showResult && timeLeft > 0) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else if (level !== "basic" && timeLeft === 0) {
      handleNextQuestion();
    }
  }, [timeLeft, level, showResult]);

  // Slide auto pour les flashcards
  useEffect(() => {
    if (level === "basic" && !showResult) {
      const interval = setInterval(() => {
        setCurrentSlide((prev) => {
          if (prev + 1 < basicSlides.length) {
            return prev + 1;
          } else {
            setLevel("moyen");
            setCurrentQuestion(0);
            setTimeLeft(20);
            return 0;
          }
        });
      }, 10000);
      return () => clearInterval(interval);
    }
  }, [level, showResult]);

  const handleAnswerClick = (option) => {
    const currentQuestions = questions[level];
    const current = currentQuestions[currentQuestion];
    if (option === current.answer) {
      setScores((prevScores) => ({ ...prevScores, [level]: prevScores[level] + 1 }));
      setMessage("‚úÖ Correct !");
    } else {
      setMessage(`‚ùå Incorrect ! La bonne r√©ponse √©tait : ${current.answer}\n ‚ÑπÔ∏è ${current.explanation}`);
    }
    setTimeout(handleNextQuestion, 2500);
  };

  const handleNextQuestion = () => {
    const currentQuestions = questions[level];
    if (currentQuestion + 1 < currentQuestions.length) {
      setCurrentQuestion(currentQuestion + 1);
      setTimeLeft(20);
      setMessage("");
    } else {
      if (level === "moyen") {
        setLevel("avance");
      } else {
        setShowResult(true);
      }
      setCurrentQuestion(0);
      setTimeLeft(20);
      setMessage("");
    }
  };

  return (
    <div className="qcm-container">
      {showResult ? (
        <Results scores={scores} />
      ) : (
        <div>
          <h4 className="subtitle"> Big-O Notation ! üîπ Niveau : {level.toUpperCase()}</h4>

          {level === "basic" ? (
            <Flashcard slide={basicSlides[currentSlide]} index={currentSlide} total={basicSlides.length} />
          ) : (
            <QuestionCard
              question={questions[level][currentQuestion].question}
              options={questions[level][currentQuestion].options}
              onAnswerClick={handleAnswerClick}
              timeLeft={timeLeft}
            />
          )}

          {message && <p className="message">{message}</p>}
        </div>
      )}
    </div>
  );
};

export default Blogs;



