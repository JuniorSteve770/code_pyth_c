import React, { useState, useEffect } from "react";
import "./QCMStyles.css";

// Flashcards pour le niveau basic
const basicSlides = [
    // üîπ 1. Classes et Objets
  { question: " Que fait le mot-cl√© `class` en C# ?", answer: "Il d√©finit une classe, c‚Äôest-√†-dire un mod√®le pour cr√©er des objets." },
  { question: " Que repr√©sente le mot `object` ?", answer: "Une instance concr√®te cr√©√©e √† partir d‚Äôune classe." },
  { question: " √Ä quoi sert le mot-cl√© `new` ?", answer: "Il permet de cr√©er une nouvelle instance d‚Äôune classe (objet)." },
  { question: " √Ä quoi sert `this` en C# ?", answer: "Il fait r√©f√©rence √† l‚Äôinstance courante de la classe." },
  { question: " Que signifie `static` dans une d√©claration ?", answer: "Cela rend le membre commun √† toutes les instances (partag√©)." },
  { question: " √Ä quoi sert `readonly` ?", answer: "D√©clare un champ modifiable uniquement dans le constructeur." },

  // üîπ 2. Encapsulation
  { question: " Que fait le mot-cl√© `private` ?", answer: "Il limite l'acc√®s √† un membre √† l‚Äôint√©rieur de la classe uniquement." },
  { question: " Que signifie `public` ?", answer: "Cela rend un membre accessible de n‚Äôimporte o√π." },
  { question: " Que permet `protected` ?", answer: "Il autorise l‚Äôacc√®s depuis la classe elle-m√™me et ses classes d√©riv√©es." },
  { question: " √Ä quoi sert `internal` ?", answer: "Rend le membre accessible uniquement dans le m√™me assembly." },
  { question: " √Ä quoi servent `get` et `set` ?", answer: "Ce sont des accesseurs qui permettent de lire ou modifier un attribut via une propri√©t√©." },
  { question: " Qu‚Äôest-ce qu‚Äôune `property` en C# ?", answer: "C‚Äôest une combinaison de `get` et `set` qui encapsule un champ." },

  // üîπ 3. H√©ritage
  { question: " Que signifie `: BaseClass` dans une d√©claration de classe ?", answer: "C‚Äôest la syntaxe pour h√©riter d‚Äôune autre classe." },
  { question: " Que fait le mot-cl√© `base` ?", answer: "Il permet d‚Äôacc√©der aux membres de la classe parente." },
  { question: " Que fait `virtual` sur une m√©thode ?", answer: "Elle rend la m√©thode red√©finissable dans une classe d√©riv√©e." },
  { question: " Que signifie `override` ?", answer: "Cela red√©finit une m√©thode h√©rit√©e d‚Äôune classe parent." },
  { question: " Que permet `sealed` ?", answer: "Il emp√™che une classe ou une m√©thode d‚Äô√™tre h√©rit√©e ou red√©finie." },
  { question: " Que fait `abstract` sur une classe ou m√©thode ?", answer: "Elle force les classes d√©riv√©es √† fournir une impl√©mentation." },

  // üîπ 4. Polymorphisme
  { question: " Que fait le mot-cl√© `override` dans le polymorphisme ?", answer: "Il red√©finit un comportement dans une classe d√©riv√©e." },
  { question: " Quel est le r√¥le de `virtual` dans le polymorphisme ?", answer: "Il autorise la red√©finition d‚Äôune m√©thode dans les sous-classes." },
  { question: " Que signifie `abstract` dans une m√©thode ?", answer: "Elle n‚Äôa pas de corps et doit √™tre impl√©ment√©e dans une sous-classe." },
  { question: " Que fait `interface` ?", answer: "Elle d√©finit un contrat sans impl√©mentation, que les classes doivent respecter." },
  { question: " √Ä quoi servent `is` et `as` ?", answer: "`is` teste un type, `as` tente une conversion de type (retourne null si √©choue)." },

  // üîπ 5. Surcharge (Overloading)
  { question: " Que fait `params` dans une m√©thode ?", answer: "Il permet de passer un nombre variable d‚Äôarguments √† une m√©thode." },
  { question: " Comment fonctionne la surcharge sans mot-cl√© sp√©cifique ?", answer: "Elle repose sur la diff√©rence de signature des m√©thodes (param√®tres diff√©rents)." },

  // üîπ 6. Abstraction et Interfaces
  { question: " Quel est le r√¥le de `interface` ?", answer: "D√©finir un contrat que les classes doivent impl√©menter sans fournir de logique." },
  { question: " √Ä quoi sert `abstract` dans une classe ?", answer: "Elle ne peut pas √™tre instanci√©e et sert de base √† des classes concr√®tes." },
  { question: " Pourquoi `implements` n‚Äôest pas utilis√© en C# ?", answer: "En C#, on utilise `:` pour impl√©menter une interface (`class MaClasse : IMonInterface`)." },

  // üîπ 7. Types g√©n√©riques et collections
  { question: " Que signifie `<T>` dans `List<T>` ou `Dictionary<TKey, TValue>` ?", answer: "C‚Äôest un param√®tre g√©n√©rique qui permet d‚Äô√©crire du code r√©utilisable et typ√©." },
  { question: " √Ä quoi sert `List<T>` ?", answer: "√Ä stocker une liste dynamique d‚Äô√©l√©ments de type T." },
  { question: " √Ä quoi sert `Dictionary<TKey, TValue>` ?", answer: "C‚Äôest une collection de paires cl√©/valeur, tr√®s utile pour faire des associations." },
  { question: " Que permet `IEnumerable<T>` ?", answer: "Parcourir une collection avec `foreach` sans conna√Ætre son type pr√©cis." },

  // üîπ 8. Structuration et gestion du code
  { question: " Que fait `namespace` ?", answer: "Organise le code dans des espaces logiques pour √©viter les conflits de noms." },
  { question: " √Ä quoi sert `using` en C# ?", answer: "√Ä importer un espace de noms ou g√©rer des ressources automatiquement (`using (var x = ...) { ... }`)." },
  { question: " Que fait `partial` ?", answer: "Permet de diviser une classe sur plusieurs fichiers sources." },
  { question: " Qu‚Äôest-ce qu‚Äôun constructeur (`constructor`) ?", answer: "Une m√©thode sp√©ciale qui initialise un objet lors de sa cr√©ation." },
  { question: " Qu‚Äôest-ce qu‚Äôun destructeur (`destructor`) ?", answer: "M√©thode appel√©e √† la destruction de l‚Äôobjet, rarement utilis√©e car le garbage collector g√®re la m√©moire." },
  { question: " Que font `async` et `await` ?", answer: "Permettent d‚Äô√©crire du code asynchrone de mani√®re lisible et fluide." },
  // üîπ 9. Principes SOLID
  { question: " Que signifie le principe de responsabilit√© unique (SRP) ?", answer: "Une classe ne doit avoir qu'une seule raison de changer, c'est-√†-dire une seule responsabilit√©." },
  { question: " Que stipule le principe ouvert/ferm√© (OCP) ?", answer: "Les entit√©s logicielles doivent √™tre ouvertes √† l'extension mais ferm√©es √† la modification." },
  { question: " En quoi consiste le principe de substitution de Liskov (LSP) ?", answer: "Les objets d'une classe d√©riv√©e doivent pouvoir √™tre substitu√©s √† ceux de la classe de base sans alt√©rer le comportement du programme." },
  { question: " Quel est le principe de s√©gr√©gation des interfaces (ISP) ?", answer: "Les clients ne doivent pas √™tre forc√©s de d√©pendre d'interfaces qu'ils n'utilisent pas." },
  { question: " Que stipule le principe d'inversion des d√©pendances (DIP) ?", answer: "Les modules de haut niveau ne doivent pas d√©pendre des modules de bas niveau ; tous deux doivent d√©pendre d'abstractions." },
// üîπ 10. Gestion des Exceptions
{ question: " Quel est le r√¥le des blocs try, catch et finally ?", answer: "`try` tente d'ex√©cuter un bloc de code, `catch` intercepte les exceptions, et `finally` s'ex√©cute toujours, qu'une exception ait √©t√© lev√©e ou non." },
{ question: " √Ä quoi sert le mot-cl√© `throw` ?", answer: "Il permet de lever une exception manuellement." },
{ question: " Qu'est-ce que la classe `Exception` en C# ?", answer: "C'est la classe de base pour toutes les exceptions en C#." },

//üîπ 11. Modificateurs d'Acc√®s Avanc√©s
{ question: " Que signifie le modificateur `protected internal` ?", answer: "L'acc√®s est autoris√© dans le m√™me assembly ou dans les classes d√©riv√©es." },
{ question: " Que signifie le modificateur `private protected` ?", answer: "L'acc√®s est autoris√© uniquement dans la classe contenant ou dans les classes d√©riv√©es situ√©es dans le m√™me assembly." },

//üîπ 12. Structures et Types Sp√©ciaux
{ question: " Qu'est-ce qu'une `struct` en C# ?", answer: "C'est un type valeur qui peut contenir des champs, des m√©thodes et des constructeurs." },
{ question: " Qu'est-ce qu'un `record` en C# ?", answer: "C'est un type r√©f√©rence immuable, principalement utilis√© pour les objets de donn√©es." },
{ question: " √Ä quoi sert une `enum` ?", answer: "√Ä d√©finir un ensemble de constantes nomm√©es." },
{ question: " Qu'est-ce qu'un `delegate` ?", answer: "C'est un type qui repr√©sente une r√©f√©rence √† une m√©thode avec une signature sp√©cifique." },
{ question: " Quel est le r√¥le d'un `event` ?", answer: "Il permet √† une classe de fournir des notifications √† d'autres classes lorsque quelque chose d'int√©ressant se produit." },

//üîπ 13. Types Nullable & Op√©rateurs Modernes
{ question: " Que signifie le `?` apr√®s un type ?", answer: "Il indique que le type peut avoir une valeur nulle." },
{ question: " √Ä quoi sert l'op√©rateur `??` ?", answer: "Il retourne la valeur de gauche si elle n'est pas nulle ; sinon, il retourne la valeur de droite." },
{ question: " Quel est le r√¥le de l'op√©rateur `?.` ?", answer: "Il permet d'acc√©der √† un membre d'un objet uniquement si l'objet n'est pas nul." },
{ question: " Que retourne la fonction `nameof()` ?", answer: "Le nom de la variable, du type ou du membre pass√© en argument, sous forme de cha√Æne." },

//üîπ 14. Design Patterns (Patrons de Conception)
{ question: " Quel est le but du patron Singleton ?", answer: "Garantir qu'une classe n'a qu'une seule instance et fournir un point d'acc√®s global √† celle-ci." },
{ question: " En quoi consiste le patron Factory Method ?", answer: "Il fournit une interface pour cr√©er des objets, mais laisse les sous-classes d√©cider de la classe √† instancier." },
{ question: " Quel est l'objectif du patron Strategy ?", answer: "D√©finir une famille d'algorithmes, les encapsuler et les rendre interchangeables." },
{ question: " √Ä quoi sert le patron Observer ?", answer: "Permet √† un objet de notifier automatiquement les modifications de son √©tat √† ses observateurs." },
{ question: " Quel est le r√¥le du patron Decorator ?", answer: "Ajouter dynamiquement des responsabilit√©s √† un objet sans modifier son code." },
{ question: " En quoi consiste le patron Adapter ?", answer: "Permet √† des interfaces incompatibles de travailler ensemble en convertissant l'interface d'une classe en une autre attendue par les clients." },
];

// QCM pour les niveaux moyen et avanc√©
const questions = {
  moyen: [
    {
        "question": "Quel est le r√¥le du mot-cl√© `this` dans la classe suivante ?\n\n```csharp\nclass Personne {\n    private string nom;\n    public Personne(string nom) {\n        this.nom = nom;\n    }\n}\n```",
        "options": [
          "Il cr√©e une nouvelle instance de la classe.",
          "Il fait r√©f√©rence √† la classe parente.",
          "Il fait r√©f√©rence √† l'instance actuelle de la classe.",
          "Il rend le champ `nom` accessible publiquement."
        ],
        "answer": "Il fait r√©f√©rence √† l'instance actuelle de la classe.",
        "explanation": "Le mot-cl√© `this` est utilis√© pour r√©f√©rencer l'instance actuelle de la classe, ce qui est utile pour distinguer les champs des param√®tres ou variables locaux portant le m√™me nom."
      },
      {
        "question": "Quelle est la sortie du code suivant ?\n\n```csharp\nclass Animal {\n    public virtual void FaireDuBruit() {\n        Console.WriteLine(\"Animal fait un bruit\");\n    }\n}\n\nclass Chien : Animal {\n    public override void FaireDuBruit() {\n        Console.WriteLine(\"Le chien aboie\");\n    }\n}\n\nAnimal a = new Chien();\na.FaireDuBruit();\n```",
        "options": [
          "Animal fait un bruit",
          "Le chien aboie",
          "Erreur de compilation",
          "Aucune sortie"
        ],
        "answer": "Le chien aboie",
        "explanation": "Gr√¢ce au polymorphisme, la m√©thode `FaireDuBruit` de la classe d√©riv√©e `Chien` est appel√©e, m√™me si l'objet est r√©f√©renc√© par un type de la classe de base `Animal`."
      },
      {
        "question": "Quel est l'effet du mot-cl√© `sealed` dans la d√©claration suivante ?\n\n```csharp\nsealed class Utilitaire {\n    public void Afficher() {\n        Console.WriteLine(\"Utilitaire\");\n    }\n}\n```",
        "options": [
          "La classe `Utilitaire` peut √™tre h√©rit√©e.",
          "La m√©thode `Afficher` ne peut pas √™tre red√©finie.",
          "La classe `Utilitaire` ne peut pas √™tre h√©rit√©e.",
          "La classe `Utilitaire` est abstraite."
        ],
        "answer": "La classe `Utilitaire` ne peut pas √™tre h√©rit√©e.",
        "explanation": "Le mot-cl√© `sealed` emp√™che une classe d'√™tre h√©rit√©e, ce qui signifie qu'aucune classe ne peut d√©river de `Utilitaire`."
      },
      {
        "question": "Quelle est la sortie du code suivant ?\n\n```csharp\ninterface ICalcul {\n    int Additionner(int a, int b);\n}\n\nclass Calculateur : ICalcul {\n    public int Additionner(int a, int b) {\n        return a + b;\n    }\n}\n\nICalcul calc = new Calculateur();\nConsole.WriteLine(calc.Additionner(3, 4));\n```",
        "options": [
          "7",
          "Erreur de compilation",
          "0",
          "3"
        ],
        "answer": "7",
        "explanation": "La classe `Calculateur` impl√©mente l'interface `ICalcul` en fournissant une d√©finition pour la m√©thode `Additionner`, qui retourne la somme des deux entiers."
      },
      {
        "question": "Quelle est la sortie du code suivant ?\n\n```csharp\nclass Base {\n    public void Afficher() {\n        Console.WriteLine(\"Base\");\n    }\n}\n\nclass Derivee : Base {\n    public new void Afficher() {\n        Console.WriteLine(\"Derivee\");\n    }\n}\n\nBase obj = new Derivee();\nobj.Afficher();\n```",
        "options": [
          "Base",
          "Derivee",
          "Erreur de compilation",
          "Aucune sortie"
        ],
        "answer": "Base",
        "explanation": "Le mot-cl√© `new` masque la m√©thode `Afficher` de la classe de base. Cependant, comme l'objet est r√©f√©renc√© par le type de la classe de base, la m√©thode de la classe de base est appel√©e."
      },
      {
        "question": "Que fait le mot-cl√© `class` en C# ?",
        "options": [
            "D√©clare une fonction",
            "D√©finit un mod√®le pour cr√©er des objets",
            "Importe une biblioth√®que externe",
            "Cr√©e une instance d'objet"
        ],
        "answer": "D√©finit un mod√®le pour cr√©er des objets",
        "explanation": "Le mot-cl√© `class` permet de d√©finir un blueprint pour cr√©er des objets avec des propri√©t√©s et m√©thodes."
    },
    {
        "question": "Que retourne ce code ?\n```csharp\nint x = 5;\nint y = x++;\nConsole.WriteLine(y);```",
        "options": [
            "5",
            "6",
            "Erreur de compilation",
            "0"
        ],
        "answer": "5",
        "explanation": "L'op√©rateur `x++` effectue un post-incr√©ment : il retourne la valeur originale (5) avant d'incr√©menter."
    },
    {
        "question": "Quel est le r√©sultat de ce code ?\n```csharp\nstring s = null;\nConsole.WriteLine(s?.Length ?? -1);```",
        "options": [
            "0",
            "null",
            "-1",
            "Erreur NullReferenceException"
        ],
        "answer": "-1",
        "explanation": "L'op√©rateur `?.` √©vite une exception si `s` est null, et `??` retourne -1 comme valeur par d√©faut."
    },
    {
        "question": "Quelle est la sortie de ce code ?\n```csharp\nvar numbers = new List<int> { 1, 2, 3 };\nnumbers[1] = 10;\nConsole.WriteLine(numbers[1]);```",
        "options": [
            "1",
            "2",
            "10",
            "Erreur"
        ],
        "answer": "10",
        "explanation": "Les listes sont mutables. On modifie ici la valeur √† l'index 1."
    },
    {
        "question": "Quel mot-cl√© permet de red√©finir une m√©thode h√©rit√©e ?",
        "options": [
            "virtual",
            "override",
            "new",
            "abstract"
        ],
        "answer": "override",
        "explanation": "`override` est utilis√© pour red√©finir une m√©thode marqu√©e comme `virtual` ou `abstract` dans la classe parente."
    }
  ],
  avance: [
    {
        "question": "Que fait ce code ?\n```csharp\npublic interface ILogger {\n    void Log(string message);\n}\nclass FileLogger : ILogger {\n    public void Log(string message) => File.WriteAllText(\"log.txt\", message);\n}```",
        "options": [
            "Cr√©e une classe abstraite",
            "Impl√©mente une interface",
            "D√©finit un delegate",
            "Utilise l'h√©ritage multiple"
        ],
        "answer": "Impl√©mente une interface",
        "explanation": "La classe `FileLogger` impl√©mente le contrat `ILogger` en fournissant une impl√©mentation concr√®te de `Log()`."
    },
    {
        "question": "Quel principe SOLID est viol√© ici ?\n```csharp\nclass Report {\n    public void GeneratePDF() { /*...*/ }\n    public void Print() { /*...*/ }\n}```",
        "options": [
            "SRP (Single Responsibility Principle)",
            "OCP (Open/Closed Principle)",
            "LSP (Liskov Substitution Principle)",
            "ISP (Interface Segregation Principle)"
        ],
        "answer": "SRP (Single Responsibility Principle)",
        "explanation": "La classe `Report` a deux responsabilit√©s : g√©n√©ration PDF et impression. Elle devrait √™tre scind√©e en deux classes."
    },
    {
        "question": "Quelle collection utiliser pour stocker des paires cl√©-valeur ?",
        "options": [
            "List<T>",
            "HashSet<T>",
            "Dictionary<TKey, TValue>",
            "Array"
        ],
        "answer": "Dictionary<TKey, TValue>",
        "explanation": "`Dictionary` est optimis√© pour les acc√®s par cl√©, contrairement aux listes ou tableaux."
    },
    {
        "question": "Que fait ce code ?\n```csharp\npublic record Person(string Name, int Age);```",
        "options": [
            "Cr√©e une classe mutable",
            "D√©finit une structure",
            "Cr√©e un type immuable avec equals/GetHashCode pr√©d√©finis",
            "G√©n√®re une interface"
        ],
        "answer": "Cr√©e un type immuable avec equals/GetHashCode pr√©d√©finis",
        "explanation": "Les `record` en C# sont des types r√©f√©rence immuables avec des m√©thodes d'√©galit√© g√©n√©r√©es automatiquement."
    },
    {
        "question": "Comment corriger cette erreur ?\n```csharp\nobject obj = \"hello\";\nint length = obj.Length; // Erreur```",
        "options": [
            "Utiliser `((string)obj).Length`",
            "Remplacer `object` par `var`",
            "Ajouter `dynamic`",
            "Utiliser `obj?.Length ?? 0`"
        ],
        "answer": "Utiliser `((string)obj).Length`",
        "explanation": "Un cast explicite est n√©cessaire car `object` n'a pas de propri√©t√© `Length`."
    }
  ]
};

// Timer
const Timer = ({ timeLeft }) => (
  <p className="timer">‚è≥ Temps restant : <span>{timeLeft}s</span></p>
);

// Composant QCM
const QuestionCard = ({ question, options, onAnswerClick, timeLeft }) => (
  <div className="question-card">
    <h4>üí° {question}</h4>
    <Timer timeLeft={timeLeft} />
    <div className="options-container">
      {options.map((option, index) => (
        <button key={index} onClick={() => onAnswerClick(option)} className="option-button">
          {index + 1}. {option}
        </button>
      ))}
    </div>
  </div>
);

// Composant Flashcard
const Flashcard = ({ slide, index, total }) => (
  <div className="question-card">
    {/* <h5>üß† Flashcard {index + 1} / {total}</h5> */}
    <p><strong>{slide.question}</strong></p>
    <p>{slide.answer}</p>
  </div>
);

// Composant R√©sultat
const Results = ({ scores }) => {
  const totalScore = scores.moyen + scores.avance;
  const totalQuestions = Object.values(questions).flat().length;
  return (
    <div className="results">
      <h3>üéØ Score final : {totalScore} / {totalQuestions}</h3>
      <p>‚úÖ Niveau Moyen : {scores.moyen}</p>
      <p>‚úÖ Niveau Avanc√© : {scores.avance}</p>
      {totalScore > 3 ? (
        <h3 className="success">üöÄ Excellent travail ! Vous ma√Ætrisez bien les CONCEPTS BIG O !</h3>
      ) : (
        <p className="fail">üìö R√©visez encore un peu pour bien comprendre les concepts, ou retournez voir les flashcards !</p>
      )}
    </div>
  );
};

// Page principale
const SignUp = () => {
  const [level, setLevel] = useState("basic");
  const [currentSlide, setCurrentSlide] = useState(0);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [scores, setScores] = useState({ moyen: 0, avance: 0 });
  const [timeLeft, setTimeLeft] = useState(20);
  const [showResult, setShowResult] = useState(false);
  const [message, setMessage] = useState("");

  // Timer pour les niveaux QCM
  useEffect(() => {
    if (level !== "basic" && !showResult && timeLeft > 0) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else if (level !== "basic" && timeLeft === 0) {
      handleNextQuestion();
    }
  }, [timeLeft, level, showResult]);

  // Slide auto pour les flashcards
  useEffect(() => {
    if (level === "basic" && !showResult) {
      const interval = setInterval(() => {
        setCurrentSlide((prev) => {
          if (prev + 1 < basicSlides.length) {
            return prev + 1;
          } else {
            setLevel("moyen");
            setCurrentQuestion(0);
            setTimeLeft(20);
            return 0;
          }
        });
      }, 10000);
      return () => clearInterval(interval);
    }
  }, [level, showResult]);

  const handleAnswerClick = (option) => {
    const currentQuestions = questions[level];
    const current = currentQuestions[currentQuestion];
    if (option === current.answer) {
      setScores((prevScores) => ({ ...prevScores, [level]: prevScores[level] + 1 }));
      setMessage("‚úÖ Correct !");
    } else {
      setMessage(`‚ùå Incorrect ! La bonne r√©ponse √©tait : ${current.answer}\n ‚ÑπÔ∏è ${current.explanation}`);
    }
    setTimeout(handleNextQuestion, 2500);
  };

  const handleNextQuestion = () => {
    const currentQuestions = questions[level];
    if (currentQuestion + 1 < currentQuestions.length) {
      setCurrentQuestion(currentQuestion + 1);
      setTimeLeft(20);
      setMessage("");
    } else {
      if (level === "moyen") {
        setLevel("avance");
      } else {
        setShowResult(true);
      }
      setCurrentQuestion(0);
      setTimeLeft(20);
      setMessage("");
    }
  };

  return (
    <div className="qcm-container">
      {showResult ? (
        <Results scores={scores} />
      ) : (
        <div>
          <h4 className="subtitle"> Big-O Notation ! üîπ Niveau : {level.toUpperCase()}</h4>

          {level === "basic" ? (
            <Flashcard slide={basicSlides[currentSlide]} index={currentSlide} total={basicSlides.length} />
          ) : (
            <QuestionCard
              question={questions[level][currentQuestion].question}
              options={questions[level][currentQuestion].options}
              onAnswerClick={handleAnswerClick}
              timeLeft={timeLeft}
            />
          )}

          {message && <p className="message">{message}</p>}
        </div>
      )}
    </div>
  );
};

export default SignUp;